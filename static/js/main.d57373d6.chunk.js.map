{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setReverse","NONE","sortOrder","setSortOrder","reorderedGoods","goods","sortType","reversed","visibleGoods","sort","good1","good2","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","isDefaultOrder","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAME,IAAME,EAAgB,WAC3B,MAAiCC,oBAAS,GAA1C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAkCF,mBAASH,EAASM,MAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KAkCMC,EA3BoB,SACxBC,EACAC,EACAC,GAEA,IAAMC,EAAY,YAAOH,GAmBzB,OAjBAG,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQL,GACN,KAAKX,EAASiB,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKhB,EAASmB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAITR,GACFC,EAAaQ,UAGRR,EAGcS,CACrBrB,EACAM,EACAH,GAGImB,EAAiBhB,IAAcP,EAASM,OAC1CF,EAEJ,OAEE,sBAAKoB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYnB,IAAcP,EAASiB,WAErCU,QAAS,kBAAMnB,EAAaR,EAASiB,WALvC,iCAUA,wBACEQ,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYnB,IAAcP,EAASmB,SAErCQ,QAAS,kBAAMnB,EAAaR,EAASmB,SALvC,4BAUA,wBACEM,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAatB,IAEfuB,QAAS,kBAAMtB,GAAYD,IAL7B,sBAUGmB,GACD,wBACEE,KAAK,SACLD,UAAWE,IAAG,6BACdC,QA/EI,WACZnB,EAAaR,EAASM,MACtBD,GAAW,IA0EL,sBAUJ,6BACE,6BACGI,EACEmB,KAAI,SAAAC,GAAI,OACP,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,cCpHrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d57373d6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setReverse] = useState(false);\n  const [sortOrder, setSortOrder] = useState(SortType.NONE);\n\n  const reset = () => {\n    setSortOrder(SortType.NONE);\n    setReverse(false);\n  };\n\n  const getReorderedGoods = (\n    goods: string[],\n    sortType: SortType,\n    reversed: boolean,\n  ) => {\n    const visibleGoods = [...goods];\n\n    visibleGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SortType.LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n\n    if (reversed) {\n      visibleGoods.reverse();\n    }\n\n    return visibleGoods;\n  };\n\n  const reorderedGoods = getReorderedGoods(\n    goodsFromServer,\n    sortOrder,\n    isReversed,\n  );\n\n  const isDefaultOrder = sortOrder === SortType.NONE\n  && !isReversed;\n\n  return (\n\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortOrder !== SortType.ALPHABET,\n          })}\n          onClick={() => setSortOrder(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortOrder !== SortType.LENGTH,\n          })}\n          onClick={() => setSortOrder(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setReverse(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(!isDefaultOrder) && (\n          <button\n            type=\"button\"\n            className={cn('button is-danger is-light')}\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {reorderedGoods\n            .map(good => (\n              <li\n                key={good}\n                data-cy=\"Good\"\n              >\n                {good}\n              </li>\n            ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}